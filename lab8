/* 
 * File:   lab.c
 * Author: paola
 *
 * Created on 18 de abril de 2022, 15:38
 */
// PIC16F887 Configuration Bit Settings

// 'C' source line config statements

// CONFIG1
#pragma config FOSC = INTRC_NOCLKOUT// Oscillator Selection bits (INTOSCIOoscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and canbe enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pinfunction is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF         // Code Protection bit (Program memory codeprotection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory codeprotection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit(Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-SafeClock Monitor is disabled)
#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin hasdigital I/O, HV on MCLR must be used for programming)

// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Resetset to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits(Write protection off)
// #pragma config statements should precede project file includes.

// Use project enums instead of #define for ON and OFF.
#include <xc.h>
#include <stdint.h>


/*
 * CONSTANTES
 */
#define _XTAL_FREQ 4000000

/*
 * VARIABLES
 */

/*
 * PROTOTIPOS DE FUNCIONES
 */
void setup (void);

/*
 * INTERRUPCIONES
 */
void __interrupt() isr (void){
    if(PIR1bits.ADIF){      //Fue interrupción del ADC?
        if(ADCON0bits.CHS == 0) //verificamos sea AN0 el canal seleccionado
            PORTC = ADRESH;     //mostramos ADRESH en PORTC
        
        else if(ADCON0bits.CHS == 1) //verificamos sea AN1 el canal seleccionado
            PORTD = ADRESH;     //mostramos ADRESH en PORTD
    }
    PIR1bits.ADIF = 0;      //Limpiamos bandera de interrupción
        
        
    return;
}

/*
 * CICLO PRINCIPAL
 */
void main (void){
    setup();
    while(1){
        //if(ADCON0bits.GO == 0){ //No hay proceso de conversión
            
           //ADCON0bits.GO = 1;
        //}
        
          if(ADCON0bits.CHS == 0b000){
            ADCON0bits.CHS = 0b001;     //cambio de canal
          }
          else if(ADCON0bits.CHS == 0b001){
            ADCON0bits.CHS = 0b000;          //cambio de canal
            __delay_ms(40);                  //tiempo de adquisición
          }   
    }
    return;
}

/*
 * CONFIGURACIONES
 */
void setup(void){
    ANSEL = 0b00000011;  //AN0 como entrada analógica
    ANSELH = 0;         //I/O digitales
    
    TRISA = 0b00000011;     // AN0 como entrada
    PORTA = 0;
    
    TRISC = 0;
    PORTC = 0;
    
    TRISD = 0;
    PORTD = 0;

    
    //Configuración reloj interno
    OSCCONbits.IRCF = 0b0110; //4MHz
    OSCCONbits.SCS = 1;         //Oscilador interno
    
    //Configuración del ADC
    ADCON0bits.ADCS = 0b01;     //Fosc/8
    ADCON1bits.VCFG0 = 0;       //VDD 'Referencias internas
    ADCON1bits.VCFG1 = 0;       // voltaje de referencia
    
    ADCON0bits.CHS = 0b0000;     //Seleccionamos AN0
    ADCON0bits.CHS = 0b0001;     //Seleccionamos AN0
    ADCON1bits.ADFM = 0;         //Justificamos a la izquierda
    ADCON0bits.ADON = 1;         //Habilitamos modulo ADC
    __delay_ms(40);
    
    // Configuración de interrupciones
    PIR1bits.ADIF = 0;          //Limpiamos bandera de int. ADC
    PIE1bits.ADIE = 1;          //Habilitamos int. de ADC
    INTCONbits.PEIE = 1;         //Habilitamos int. de periféricos
    INTCONbits.GIE = 1;         //Habilitamos int. globales
    
    
   return; 
    
}
