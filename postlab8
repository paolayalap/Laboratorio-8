/* 
 * File:   postlab.c
 * Author: paola
 *
 * Created on 19 de abril de 2022, 10:05
 */
// PIC16F887 Configuration Bit Settings

// 'C' source line config statements

// CONFIG1
#pragma config FOSC = INTRC_NOCLKOUT// Oscillator Selection bits (INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF       // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is enabled)
#pragma config LVP = ON         // Low Voltage Programming Enable bit (RB3/PGM pin has PGM function, low voltage programming enabled)

// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

/*
 *LIBRERIAS
 */
#include <xc.h>     
#include <stdint.h>

/*
 *DEFINICIONES
 */
#define _tmr0_value 177 //5ms

/*
 *VARIABLES GLOBALES 
 */
uint8_t uni; 
uint8_t dec; 
uint8_t cen;                //variables para cada display
uint8_t flags;              //bandera para habilitar pot1 y pot2
uint8_t multiplexeo;        //pues para multiplexar 
uint8_t POT1;               //canal en AN0
uint8_t POT2;               //canal en AN1


/*
 *DECLARACIÓN DE FUNCIONES
 */
void setup(void);
void BCD (void);
int disp(int dig);


/*
 *INTERRUPCIONES
 */
void __interrupt() isr (void)
{
    //ADC
    if (ADIF == 1){
        switch(flags){
            case(1): 
                POT1 = ADRESH; //potenciometro 1 en canal AN0
                flags = 2;           //en caso no sea AN0, pasa a AN1
                break;
            case(2): 
                POT2 = ADRESH; //potenciometro 2 en canal AN1
                flags = 1;           //en caso no sea AN1, pasa a AN0
                break;
        }        
        ADIF = 0;// se limpia la bandera    
    }
    if (T0IF ==1){
        switch (multiplexeo){
            case(1): multiplexeo = 2; break;
            case(2): multiplexeo = 4; break;
            case(4): multiplexeo = 1; break;
        } 
        TMR0 = _tmr0_value;
        T0IF = 0;// se limpia bandera 
    }  
} 


/*
 *CONFIGURACION PRINCIPAL
 */
void main(void){
    
    setup();
    // valores de inicio para la conversión
    flags = 1; 
    multiplexeo = 1;
    while(1)
    {   
        BCD();
        switch(flags){
            case(1):
                ADCON0bits.CHS = 0b000;//Potenciometro 1 canal AN0 
                ADCON0bits.GO_DONE = 1;
                break;

            case(2):
                ADCON0bits.CHS = 0b001;//Potenciometro 2 canal AN1 
                ADCON0bits.GO_DONE = 1;
                break;
        }
        PORTB = POT1;
        switch(multiplexeo){
            case(1):  PORTC = 0; 
                      PORTD = 0X01; 
                      disp(cen); 
                      break;
                      
            case(2):  PORTC = 0; 
                      PORTD = 0X02; 
                      disp(dec); 
                      break;
                      
            case(4):  PORTC = 0; 
                      PORTD = 0X04; 
                      disp(uni); 
                      break;
    } 
}

}

void setup (void)
{
    ANSEL = 0b00000011;     //AN0 y AN1 como entrada analógica
    ANSELH = 0;             //I/O digitales

    TRISA = 0b00000011;     // AN0 y AN1 como entrada
    PORTA = 0;
    
    TRISB = 0;              //LEDS o R2R para DAC
    PORTB = 0;
    
    TRISC = 0;              //Salida para displays
    PORTC = 0;
    
    TRISD = 0;              //Transistores para displays
    PORTD = 0;

// Configuración tmr0
    OPTION_REGbits.T0CS = 0;    //(Fosc/4)
    OPTION_REGbits.PSA = 0;     //prescaler al Timer0
    OPTION_REGbits.PS2 = 0;     //1:2 
    OPTION_REGbits.PS1 = 0;
    OPTION_REGbits.PS0 = 0;
    TMR0 = _tmr0_value;
    
//Configuración de reloj
    OSCCONbits.SCS = 1;
    OSCCONbits.IRCF = 0b001;    //oscilador 125KHz
    
//Interrupciones 
    INTCONbits.T0IF = 0;        //bandera tmr0
    INTCONbits.T0IE = 1;        //interrupciones del tmr0
    INTCONbits.GIE = 1;         //interrupciones globales
    INTCONbits.PEIE= 1;         //interrupciones de periféricos
    PIE1bits.ADIE = 1;          //interrupción del ADC
    
//Configuración de ADC
    ADCON1bits.ADFM = 0;        //agarra los bits de la izquierda
    ADCON0bits.ADCS = 0b00;     //Fosc/2
    PIR1bits.ADIF = 0;          //bandera de interrupción del ADC 
    ADCON0bits.ADON = 1;        //se activa para las conversiones del ADC
    
    ADCON1bits.VCFG0 = 0;       //voltaje de referencia
    ADCON1bits.VCFG1 = 0;       //voltaje de referencia

    ADCON0bits.CHS = 0b0000;     //canal AN0
    ADCON0bits.CHS = 0b0001;     //canal AN1
    
}
//Conversión binario -> decimal
void BCD (void){ 
    int var;
    cen = POT2 /100;
    var = POT2 % 100;
    dec = var /10;
    uni = var % 10; 
    
} 
//Tabla para displays
int disp(int dig){
    switch (dig){
        case(0): PORTC = (0b0111111);
        break;
        case(1): PORTC = (0b0000110);
        break;
        case(2): PORTC = (0b1011011);
        break;
        case(3): PORTC = (0b1001111);
        break;
        case(4): PORTC = (0b1100110);
        break;
        case(5): PORTC = (0b1101101);
        break;
        case(6): PORTC = (0b1111101);
        break;
        case(7): PORTC = (0b1111111);
        break;
        case(8): PORTC = (0b1111111);
        break;
        case(9): PORTC = (0b1100111);
        break;
    }  
}
